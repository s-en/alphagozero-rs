extern crate az_game;

pub use az_game::igo::*;

#[cfg(test)]
mod board {
  use super::*;

  #[test]
  fn remove_death_stones_5x5() {
      let mut board = Board::new(BoardSize::S5);
      let b = Turn::Black;
      let w = Turn::White;
      let tb = Stones::new32(0b00000_00000_00000_00000_10000);
      let tw = Stones::new32(0b01100_10011_01010_00101_00010);
      board.set_stones(b, tb);
      board.set_stones(w, tw);
      board.remove_death_stones(b);
      assert_eq!(
        format!("{}", board),
        "012345\n\
        1-x--o\n\
        2x-x--\n\
        3-x-x-\n\
        4xx--x\n\
        5--xx-\n"
      );
  }
  #[test]
  fn valid_moves_5x5() {
    let mut board = Board::new(BoardSize::S5);
    let b = Turn::Black;
    let w = Turn::White;
    let tb = Stones::new32(0b10100_01000_00010_00101_01010);
    let tw = Stones::new32(0b00000_10100_11101_01000_10000);
    board.set_stones(b, tb);
    board.set_stones(w, tw);
    assert_eq!(
      format!("{}", board),
      "012345\n\
       1-o-ox\n\
       2o-ox-\n\
       3xoxxx\n\
       4--xox\n\
       5--o-o\n"
    );
    let v = board.valid_moves(w);
    assert_eq!(
      format!("{}", v),
      "--o--\n\
       ----o\n\
       -----\n\
       oo---\n\
       oo-o-\n"
    );
    let v = board.valid_moves_for_train(w, false);
    assert_eq!(
      format!("{}", v),
      "--o--\n\
       ----o\n\
       -----\n\
       oo---\n\
       oo-o-\n"
    );
  }
  #[test]
  fn valid_moves_7x7() {
    let mut board = Board::new(BoardSize::S7);
    let b = Turn::Black;
    let w = Turn::White;
    let tb = Stones::new64(0b0101000_1010001_0100001_1001100_1001011_0000001_0000000);
    let tw = Stones::new64(0b0000000_0000100_0010100_0010000_0010000_1011100_0111111);
    board.set_stones(b, tb);
    board.set_stones(w, tw);
    board.turn = Turn::Black;
    board.action(19, board.turn);
    assert_eq!(
      format!("{}", board),
      "01234567\n\
       1xxxxxx-\n\
       2o-xxx-x\n\
       3oo-oxoo\n\
       4--oox-o\n\
       5o-x-xo-\n\
       6o-x-o-o\n\
       7---o-o-\n"
    );
  }
  #[test]
  fn valid_moves_2_5x5() {
    let mut board = Board::new(BoardSize::S5);
    let b = Turn::Black;
    let w = Turn::White;
    let tb = Stones::new32(0b00000_00000_00000_00000_00000);
    let tw = Stones::new32(0b01010_10101_00010_00000_00000);
    board.set_stones(b, tb);
    board.set_stones(w, tw);
    println!("{:}", board);
    assert_eq!(
      format!("{}", board),
      "012345\n\
       1-----\n\
       2-----\n\
       3-x---\n\
       4x-x-x\n\
       5-x-x-\n"
    );
    let v = board.valid_moves(w);
    assert_eq!(
      format!("{}", v),
      "ooooo\n\
       ooooo\n\
       o-ooo\n\
       -o-o-\n\
       o-o-o\n"
    );
    let v = board.valid_moves_for_train(w, true);
    // 自分の目埋めるの禁止
    assert_eq!(
      format!("{}", v),
      "ooooo\n\
       ooooo\n\
       o-ooo\n\
       ---o-\n\
       -----\n"
    );
  }
  #[test]
  fn valid_moves_ignore_suicide_5x5() {
    let mut board = Board::new(BoardSize::S5);
    let b = Turn::Black;
    let w = Turn::White;
    let tb = Stones::new32(0b01010_10101_00010_00000_00000);
    let tw = Stones::new32(0b00000_00000_00000_00000_00000);
    board.set_stones(b, tb);
    board.set_stones(w, tw);
    assert_eq!(
      format!("{}", board),
      "012345\n\
       1-----\n\
       2-----\n\
       3-o---\n\
       4o-o-o\n\
       5-o-o-\n"
    );
    let v = board.valid_moves(w);
    assert_eq!(
      format!("{}", v),
      "ooooo\n\
       ooooo\n\
       o-ooo\n\
       ---o-\n\
       -----\n"
    );
    let v = board.valid_moves_for_train(w, false);
    assert_eq!(
      format!("{}", v),
      "ooooo\n\
       ooooo\n\
       o-ooo\n\
       ---o-\n\
       -----\n"
    );
  }
  #[test]
  fn vec_valid_moves_5x5() {
    let mut board = Board::new(BoardSize::S5);
    let b = Turn::Black;
    let w = Turn::White;
    let tb = Stones::new32(0b10100_01000_00010_00101_01010);
    let tw = Stones::new32(0b00000_10100_11101_01000_10000);
    board.set_stones(b, tb);
    board.set_stones(w, tw);
    let v = board.vec_valid_moves_for_train(w);
    assert_eq!(
      v,
      vec![
        false, false, true, false, false,
        false, false, false, false, false,
        false, false, false, false, false,
        true, true, false, false, false,
        true, true, false, true, false,
        false
      ]
    );
  }
  #[test]
  fn vec_valid_moves_cpu_5x5() {
    let mut board = Board::new(BoardSize::S5);
    let b = Turn::Black;
    let w = Turn::White;
    let tb = Stones::new32(0b10100_01010_00010_00101_01010);
    let tw = Stones::new32(0b00000_10100_11101_01000_10000);
    board.set_stones(b, tb);
    board.set_stones(w, tw);
    let v = board.vec_valid_moves_for_cpu(w);
    assert_eq!(
      v,
      vec![
        false, false, true, false, false,
        false, false, false, false, false,
        false, false, false, false, false,
        true, false, false, false, false,
        true, true, false, true, false,
        true
      ]
    );
  }
  #[test]
  fn vec_valid_moves_cpu_5x5_suicide() {
    let mut board = Board::new(BoardSize::S5);
    let b = Turn::Black;
    let w = Turn::White;
    let tb = Stones::new32(0b00100_11100_00000_00000_00000);
    let tw = Stones::new32(0b01000_00000_00000_00000_00000);
    board.set_stones(b, tb);
    board.set_stones(w, tw);
    let v = board.vec_valid_moves_for_cpu(w);
    println!("{:}", board);
    println!("{:?}", v);
    assert_eq!(
      v,
      vec![
        true, true, true, true, true,
        true, true, true, true, true,
        true, true, true, true, true,
        true, true, false, false, false,
        true, true, false, false, false,
        true
      ]
    );
  }
  #[test]
  fn check_kou() {
    let mut board = Board::new(BoardSize::S5);
    let b = Turn::Black;
    let w = Turn::White;
    let tb = Stones::new32(0b01000_10000_00000_00000_00000);
    let tw = Stones::new32(0b00100_01000_00000_00000_00000);
    board.set_stones(b, tb);
    board.set_stones(w, tw);

    board.action_xy(5, 5, w);
    println!("{}", board);
    let v = board.valid_moves_for_train(b, false);
    assert_eq!(
      format!("{}", v),
      "ooooo\n\
       ooooo\n\
       ooooo\n\
       ooo--\n\
       oo---\n"
    );
    board.action_xy(1, 1, b);
    let v = board.valid_moves_for_train(b, false);
    assert_eq!(
      format!("{}", v),
      "-oooo\n\
       ooooo\n\
       ooooo\n\
       ooo--\n\
       oo-o-\n"
    );
  }
  //#[test]
  // fn symmetries() {
  //     let mut board = Board::new(BoardSize::S5);
  //     let b = Turn::Black;
  //     let w = Turn::White;
  //     let tb = Stones::new32(0b01111_10111_00000_00000_00000);
  //     let tw = Stones::new32(0b01111_10111_00000_00000_00000);
  //     board.set_stones(b, tb);
  //     board.set_stones(w, tw);
  //     board.action_xy(5, 5, b);
  //     board.action_xy(5, 5, w);
  //     let pi: Vec<f32> = vec![
  //       0.,0.,0.,0.,0.,
  //       0.,0.,0.,0.,0.,
  //       0.,0.,0.,0.,0.,
  //       1.,1.,1.,0.,1.,
  //       1.,1.,1.,1.,1.,
  //       0.
  //     ];
  //     println!("turn {:?}", board.turn as i32);
  //     let sym = board.symmetries(pi);
  //     assert_eq!(
  //       sym[0],
  //       (
  //         vec![
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,

  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 1.0, 0.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,

  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 1.0, 0.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,

  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 1.0, 0.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,

  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 1.0, 0.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 0.0,

  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 1.0, 0.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 0.0,

  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 1.0, 0.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 0.0,

  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,

  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         ],
  //         vec![
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 1.0, 0.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         0.
  //         ],
  //       )
  //     );
  //     assert_eq!(
  //       sym[1],
  //       (
  //         vec![
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,

  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 0.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,

  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 0.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,

  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 0.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,

  //         0.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 0.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,

  //         0.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 0.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,

  //         0.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 0.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,

  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,

  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         ],
  //         vec![
  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 0.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         0.
  //         ],
  //       )
  //     );
  //     assert_eq!(
  //       sym[2],
  //       (
  //         vec![
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,

  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 0.0, 1.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0, 

  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 0.0, 1.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,

  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 0.0, 1.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0, 

  //         1.0, 1.0, 1.0, 1.0, 0.0,
  //         1.0, 1.0, 1.0, 0.0, 1.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,

  //         1.0, 1.0, 1.0, 1.0, 0.0,
  //         1.0, 1.0, 1.0, 0.0, 1.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0, 

  //         1.0, 1.0, 1.0, 1.0, 0.0,
  //         1.0, 1.0, 1.0, 0.0, 1.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,

  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,

  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         ],
  //         vec![
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 0.0, 1.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.
  //         ],
  //       )
  //     );
  //     assert_eq!(
  //       sym[3],
  //       (
  //         vec![
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,

  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 0.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,

  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 0.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,

  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 0.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,

  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 1.0, 0.0, 0.0, 0.0,
          
  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 1.0, 0.0, 0.0, 0.0,

  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 1.0, 0.0, 0.0, 0.0,

  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,

  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         ],
  //         vec![
  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         1.0, 0.0, 0.0, 0.0, 0.0,
  //         1.0, 1.0, 0.0, 0.0, 0.0,
  //         0.
  //         ],
  //       )
  //     );
  //     assert_eq!(
  //       sym[4],
  //       (
  //         vec![
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,

  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 0.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,

  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 0.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,

  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 0.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,

  //         0.0, 0.0, 0.0, 1.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,

  //         0.0, 0.0, 0.0, 1.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,

  //         0.0, 0.0, 0.0, 1.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,

  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,

  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         ],
  //         vec![
  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 0.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.
  //         ],
  //       )
  //     );
  //     assert_eq!(
  //       sym[5],
  //       (
  //         vec![
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,

  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         1.0, 0.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,

  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         1.0, 0.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,

  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         1.0, 0.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,

  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         1.0, 0.0, 1.0, 1.0, 1.0,
  //         0.0, 1.0, 1.0, 1.0, 1.0,

  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         1.0, 0.0, 1.0, 1.0, 1.0,
  //         0.0, 1.0, 1.0, 1.0, 1.0,

  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         1.0, 0.0, 1.0, 1.0, 1.0,
  //         0.0, 1.0, 1.0, 1.0, 1.0,

  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,

  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         ],
  //         vec![
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         1.0, 0.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         0.
  //         ],
  //       )
  //     );
  //     assert_eq!(
  //       sym[6],
  //       (
  //         vec![
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,

  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 0.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,

  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 0.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,

  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 0.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,

  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 0.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 0.0,

  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 0.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 0.0,

  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 0.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 0.0,

  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,

  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         ],
  //         vec![
  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 0.0, 1.0,
  //         0.0, 0.0, 0.0, 1.0, 1.0,
  //         0.
  //         ],
  //       )
  //     );
  //     assert_eq!(
  //       sym[7],
  //       (
  //         vec![
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 1.0, 1.0, 1.0, 1.0,

  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 0.0, 1.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,

  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 0.0, 1.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,

  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 0.0, 1.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,

  //         0.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 0.0, 1.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,

  //         0.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 0.0, 1.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,

  //         0.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 0.0, 1.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,

  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,

  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         ],
  //         vec![
  //         1.0, 1.0, 1.0, 1.0, 1.0,
  //         1.0, 0.0, 1.0, 1.0, 1.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.0, 0.0, 0.0, 0.0, 0.0,
  //         0.
  //         ]
  //       )
  //     );
  // }
}